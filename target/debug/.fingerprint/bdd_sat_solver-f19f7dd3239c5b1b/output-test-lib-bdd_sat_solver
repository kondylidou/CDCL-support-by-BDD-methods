{"message":"expected expression, found `/`","code":null,"level":"error","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":2543,"byte_end":2544,"line_start":69,"line_end":69,"column_start":90,"column_end":91,"is_primary":true,"text":[{"text":"        resolved_clauses = resolved_clauses.into_iter().unique().collect::<Vec<Expr>>();*/","highlight_start":90,"highlight_end":91}],"label":"expected expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected expression, found `/`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:69:90\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        resolved_clauses = resolved_clauses.into_iter().unique().collect::<Vec<Expr>>();*/\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected expression\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `parser` in the crate root","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":3455,"byte_end":3461,"line_start":95,"line_end":95,"column_start":32,"column_end":38,"is_primary":true,"text":[{"text":"        expr::bool_expr::Expr, parser::dimacs::parse_dimacs,","highlight_start":32,"highlight_end":38}],"label":"could not find `parser` in the crate root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `parser` in the crate root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:95:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        expr::bool_expr::Expr, parser::dimacs::parse_dimacs,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `parser` in the crate root\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `parser` in the crate root","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":3366,"byte_end":3372,"line_start":98,"line_end":98,"column_start":40,"column_end":46,"is_primary":true,"text":[{"text":"    use crate::{expr::bool_expr::Expr, parser::dimacs::parse_dimacs, preprocessing};","highlight_start":40,"highlight_end":46}],"label":"could not find `parser` in the crate root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `parser` in the crate root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:98:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::{expr::bool_expr::Expr, parser::dimacs::parse_dimacs, preprocessing};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `parser` in the crate root\u001b[0m\n\n"}
{"message":"unresolved import `itertools`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering.rs","byte_start":202,"byte_end":211,"line_start":6,"line_end":6,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use itertools::Itertools;","highlight_start":5,"highlight_end":14}],"label":"use of undeclared crate or module `itertools`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `itertools`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse itertools::Itertools;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `itertools`\u001b[0m\n\n"}
{"message":"no method named `cartesian_product` found for struct `std::slice::Iter` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":1908,"byte_end":1925,"line_start":57,"line_end":57,"column_start":51,"column_end":68,"is_primary":true,"text":[{"text":"        for (expr1, expr2) in self.pos_occ.iter().cartesian_product(self.neg_occ.iter()) {","highlight_start":51,"highlight_end":68}],"label":"method not found in `Iter<'_, Expr>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `cartesian_product` found for struct `std::slice::Iter` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:57:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for (expr1, expr2) in self.pos_occ.iter().cartesian_product(self.neg_occ.iter()) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Iter<'_, Expr>`\u001b[0m\n\n"}
{"message":"this function takes 3 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":2109,"byte_end":2142,"line_start":60,"line_end":60,"column_start":55,"column_end":88,"is_primary":false,"text":[{"text":"                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);","highlight_start":55,"highlight_end":88}],"label":"an argument of type `&mut HashMap<i32, Vec<usize>>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/bucket.rs","byte_start":2091,"byte_end":2109,"line_start":60,"line_end":60,"column_start":37,"column_end":55,"is_primary":true,"text":[{"text":"                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);","highlight_start":37,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"types differ in mutability","code":null,"level":"note","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":2132,"byte_end":2141,"line_start":60,"line_end":60,"column_start":78,"column_end":87,"is_primary":true,"text":[{"text":"                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);","highlight_start":78,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected mutable reference `&mut HashMap<i32, Expr>`\n           found reference `&Vec<bdd_util::BddVar>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/expr/bool_expr.rs","byte_start":2917,"byte_end":2933,"line_start":86,"line_end":86,"column_start":25,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn parse_clause(clause: Vec<i32>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Expr {","highlight_start":25,"highlight_end":41}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2935,"byte_end":2985,"line_start":86,"line_end":86,"column_start":43,"column_end":93,"is_primary":false,"text":[{"text":"    pub fn parse_clause(clause: Vec<i32>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Expr {","highlight_start":43,"highlight_end":93}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2987,"byte_end":3054,"line_start":86,"line_end":86,"column_start":95,"column_end":162,"is_primary":false,"text":[{"text":"    pub fn parse_clause(clause: Vec<i32>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Expr {","highlight_start":95,"highlight_end":162}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2904,"byte_end":2916,"line_start":86,"line_end":86,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn parse_clause(clause: Vec<i32>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Expr {","highlight_start":12,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":2109,"byte_end":2142,"line_start":60,"line_end":60,"column_start":55,"column_end":88,"is_primary":true,"text":[{"text":"                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);","highlight_start":55,"highlight_end":88}],"label":null,"suggested_replacement":"(&mut resolved_clause, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:60:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `&mut HashMap<i32, Vec<usize>>` is missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: types differ in mutability\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:60:78\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let resolved_expr = Expr::parse_clause(&mut resolved_clause, variables);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut HashMap<i32, Expr>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                      found reference `\u001b[0m\u001b[0m\u001b[1m&Vec<bdd_util::BddVar>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/bool_expr.rs:86:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfn parse_clause(clause: Vec<i32>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                let resolved_expr = Expr::parse_clause\u001b[0m\u001b[0m\u001b[38;5;10m(&mut resolved_clause, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"no method named `unique` found for struct `std::vec::IntoIter` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/bucket.rs","byte_start":2510,"byte_end":2516,"line_start":69,"line_end":69,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"        resolved_clauses = resolved_clauses.into_iter().unique().collect::<Vec<Expr>>();*/","highlight_start":57,"highlight_end":63}],"label":"method not found in `IntoIter<Expr>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unique` found for struct `std::vec::IntoIter` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/bucket.rs:69:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        resolved_clauses = resolved_clauses.into_iter().unique().collect::<Vec<Expr>>();*/\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `IntoIter<Expr>`\u001b[0m\n\n"}
{"message":"no method named `unique` found for struct `std::vec::IntoIter` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering.rs","byte_start":3588,"byte_end":3651,"line_start":82,"line_end":84,"column_start":36,"column_end":14,"is_primary":false,"text":[{"text":"        potential_learnt_clauses = potential_learnt_clauses","highlight_start":36,"highlight_end":60},{"text":"            .into_iter()","highlight_start":1,"highlight_end":25},{"text":"            .unique()","highlight_start":1,"highlight_end":14}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering.rs","byte_start":3651,"byte_end":3657,"line_start":84,"line_end":84,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"            .unique()","highlight_start":14,"highlight_end":20}],"label":"method not found in `IntoIter<Expr>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unique` found for struct `std::vec::IntoIter` in the current scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering.rs:84:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        potential_learnt_clauses = potential_learnt_clauses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m____________________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .into_iter()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .unique()\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `IntoIter<Expr>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":5844,"byte_end":5851,"line_start":174,"line_end":174,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"        let vars = builder.make_variables(clause1, &scores);","highlight_start":43,"highlight_end":50}],"label":"expected `HashMap<i32, Expr>`, found `Vec<i32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":5829,"byte_end":5843,"line_start":174,"line_end":174,"column_start":28,"column_end":42,"is_primary":false,"text":[{"text":"        let vars = builder.make_variables(clause1, &scores);","highlight_start":28,"highlight_end":42}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<i32, Expr>`\n   found struct `Vec<i32>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":1298,"byte_end":1343,"line_start":40,"line_end":40,"column_start":38,"column_end":83,"is_primary":false,"text":[{"text":"    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) -> Vec<BddVar> {","highlight_start":38,"highlight_end":83}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":1272,"byte_end":1286,"line_start":40,"line_end":40,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) -> Vec<BddVar> {","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:174:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let vars = builder.make_variables(clause1, &scores);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `HashMap<i32, Expr>`, found `Vec<i32>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<i32, Expr>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mVec<i32>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:40:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) ->\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\n\n"}
{"message":"this function takes 4 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":5913,"byte_end":5934,"line_start":176,"line_end":176,"column_start":50,"column_end":71,"is_primary":false,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":50,"highlight_end":71}],"label":"two arguments of type `&mut HashMap<i32, Expr>` and `&mut HashMap<i32, Vec<usize>>` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":5894,"byte_end":5913,"line_start":176,"line_end":176,"column_start":31,"column_end":50,"is_primary":true,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":31,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/expr/bool_expr.rs","byte_start":2381,"byte_end":2408,"line_start":74,"line_end":74,"column_start":26,"column_end":53,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":26,"highlight_end":53}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2410,"byte_end":2433,"line_start":74,"line_end":74,"column_start":55,"column_end":78,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":55,"highlight_end":78}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2435,"byte_end":2485,"line_start":74,"line_end":74,"column_start":80,"column_end":130,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":80,"highlight_end":130}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2487,"byte_end":2554,"line_start":74,"line_end":74,"column_start":132,"column_end":199,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":132,"highlight_end":199}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2367,"byte_end":2380,"line_start":74,"line_end":74,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":12,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":5913,"byte_end":5934,"line_start":176,"line_end":176,"column_start":50,"column_end":71,"is_primary":true,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":50,"highlight_end":71}],"label":null,"suggested_replacement":"(&mut clauses, &vars, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 4 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:176:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtwo arguments of type `&mut HashMap<i32, Expr>` and `&mut HashMap<i32, Vec<usize>>` are missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/bool_expr.rs:74:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut clauses_set = Expr::parse_clauses\u001b[0m\u001b[0m\u001b[38;5;10m(&mut clauses, &vars, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":7385,"byte_end":7392,"line_start":227,"line_end":227,"column_start":43,"column_end":50,"is_primary":true,"text":[{"text":"        let vars = builder.make_variables(clause1, &scores);","highlight_start":43,"highlight_end":50}],"label":"expected `HashMap<i32, Expr>`, found `Vec<i32>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":7370,"byte_end":7384,"line_start":227,"line_end":227,"column_start":28,"column_end":42,"is_primary":false,"text":[{"text":"        let vars = builder.make_variables(clause1, &scores);","highlight_start":28,"highlight_end":42}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `HashMap<i32, Expr>`\n   found struct `Vec<i32>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":1298,"byte_end":1343,"line_start":40,"line_end":40,"column_start":38,"column_end":83,"is_primary":false,"text":[{"text":"    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) -> Vec<BddVar> {","highlight_start":38,"highlight_end":83}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":1272,"byte_end":1286,"line_start":40,"line_end":40,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) -> Vec<BddVar> {","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:227:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let vars = builder.make_variables(clause1, &scores);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `HashMap<i32, Expr>`, found `Vec<i32>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mHashMap<i32, Expr>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found struct `\u001b[0m\u001b[0m\u001b[1mVec<i32>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:40:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn make_variables(&mut self, var_map: std::collections::HashMap<i32, Expr>, vars_scores: &std::collections::HashMap<i32, f64>) ->\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\n\n"}
{"message":"this function takes 4 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":7454,"byte_end":7475,"line_start":229,"line_end":229,"column_start":50,"column_end":71,"is_primary":false,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":50,"highlight_end":71}],"label":"two arguments of type `&mut HashMap<i32, Expr>` and `&mut HashMap<i32, Vec<usize>>` are missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":7435,"byte_end":7454,"line_start":229,"line_end":229,"column_start":31,"column_end":50,"is_primary":true,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":31,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"src/expr/bool_expr.rs","byte_start":2381,"byte_end":2408,"line_start":74,"line_end":74,"column_start":26,"column_end":53,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":26,"highlight_end":53}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2410,"byte_end":2433,"line_start":74,"line_end":74,"column_start":55,"column_end":78,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":55,"highlight_end":78}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2435,"byte_end":2485,"line_start":74,"line_end":74,"column_start":80,"column_end":130,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":80,"highlight_end":130}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2487,"byte_end":2554,"line_start":74,"line_end":74,"column_start":132,"column_end":199,"is_primary":false,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":132,"highlight_end":199}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/bool_expr.rs","byte_start":2367,"byte_end":2380,"line_start":74,"line_end":74,"column_start":12,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -> Vec<Expr> {","highlight_start":12,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the arguments","code":null,"level":"help","spans":[{"file_name":"src/variable_ordering/var_ordering_builder.rs","byte_start":7454,"byte_end":7475,"line_start":229,"line_end":229,"column_start":50,"column_end":71,"is_primary":true,"text":[{"text":"        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);","highlight_start":50,"highlight_end":71}],"label":null,"suggested_replacement":"(&mut clauses, &vars, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 4 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/variable_ordering/var_ordering_builder.rs:229:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut clauses_set = Expr::parse_clauses(&mut clauses, &vars);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mtwo arguments of type `&mut HashMap<i32, Expr>` and `&mut HashMap<i32, Vec<usize>>` are missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/bool_expr.rs:74:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mfn parse_clauses(clauses: &mut Vec<Vec<i32>>, variables: &Vec<BddVar>, var_map: &mut std::collections::HashMap<i32, Expr>, var_clause_arities: &mut std::collections::HashMap<i32, Vec<usize>>) -\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let mut clauses_set = Expr::parse_clauses\u001b[0m\u001b[0m\u001b[38;5;10m(&mut clauses, &vars, /* &mut HashMap<i32, Expr> */, /* &mut HashMap<i32, Vec<usize>> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 12 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0308, E0432, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0308, E0432, E0433, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
