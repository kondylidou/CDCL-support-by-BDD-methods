{"message":"unresolved import `hashbrown`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":89,"byte_end":98,"line_start":4,"line_end":4,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use hashbrown::HashMap as FastHashMap;","highlight_start":5,"highlight_end":14}],"label":"use of undeclared crate or module `hashbrown`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `hashbrown`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse hashbrown::HashMap as FastHashMap;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `hashbrown`\u001b[0m\n\n"}
{"message":"cannot find function `alt` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":3045,"byte_end":3048,"line_start":90,"line_end":90,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    alt((|i| variable(i, var_map), |i| not_expr(i, var_map), |i| and_expr(i, var_map), |i| or_expr(i, var_map)))(input)","highlight_start":5,"highlight_end":8}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this function","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::fs::File;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use nom::branch::alt;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function `alt` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:90:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alt((|i| variable(i, var_map), |i| not_expr(i, var_map), |i| and_expr(i, var_map), |i| or_expr(i, var_map)))(input)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[38;5;10muse nom::branch::alt;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused import: `variable_ordering::var_ordering`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/expr/bool_expr.rs","byte_start":108,"byte_end":139,"line_start":4,"line_end":4,"column_start":59,"column_end":90,"is_primary":true,"text":[{"text":"    bdd::Bdd, bdd_util::BddVar, expr::bool_expr::Expr::*, variable_ordering::var_ordering,","highlight_start":59,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/expr/bool_expr.rs","byte_start":106,"byte_end":139,"line_start":4,"line_end":4,"column_start":57,"column_end":90,"is_primary":true,"text":[{"text":"    bdd::Bdd, bdd_util::BddVar, expr::bool_expr::Expr::*, variable_ordering::var_ordering,","highlight_start":57,"highlight_end":90}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `variable_ordering::var_ordering`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/bool_expr.rs:4:59\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    bdd::Bdd, bdd_util::BddVar, expr::bool_expr::Expr::*, variable_ordering::var_ordering,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::collections::HashMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/expr/parser.rs","byte_start":58,"byte_end":83,"line_start":3,"line_end":3,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":54,"byte_end":84,"line_start":3,"line_end":3,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"use std::collections::HashMap;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::collections::HashMap`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::collections::HashMap;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `delimited`, `line_ending`, `map`, `multi::many0`, `separated_pair`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/expr/parser.rs","byte_start":195,"byte_end":206,"line_start":7,"line_end":7,"column_start":35,"column_end":46,"is_primary":true,"text":[{"text":"    character::complete::{digit1, line_ending, space0, space1},","highlight_start":35,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":242,"byte_end":245,"line_start":8,"line_end":8,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"    combinator::{map, map_res},","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":261,"byte_end":273,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    multi::many0,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":290,"byte_end":299,"line_start":10,"line_end":10,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    sequence::{delimited, separated_pair},","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":301,"byte_end":315,"line_start":10,"line_end":10,"column_start":27,"column_end":41,"is_primary":true,"text":[{"text":"    sequence::{delimited, separated_pair},","highlight_start":27,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":193,"byte_end":206,"line_start":7,"line_end":7,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"    character::complete::{digit1, line_ending, space0, space1},","highlight_start":33,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":242,"byte_end":247,"line_start":8,"line_end":8,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"    combinator::{map, map_res},","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":255,"byte_end":316,"line_start":8,"line_end":10,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":"    combinator::{map, map_res},","highlight_start":31,"highlight_end":32},{"text":"    multi::many0,","highlight_start":1,"highlight_end":18},{"text":"    sequence::{delimited, separated_pair},","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `delimited`, `line_ending`, `map`, `multi::many0`, `separated_pair`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:7:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    character::complete::{digit1, line_ending, space0, space1},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    combinator::{map, map_res},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    multi::many0,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    sequence::{delimited, separated_pair},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":1721,"byte_end":1725,"line_start":56,"line_end":56,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":1736,"byte_end":1758,"line_start":56,"line_end":56,"column_start":35,"column_end":57,"is_primary":false,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":35,"highlight_end":57}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":1771,"byte_end":1772,"line_start":56,"line_end":56,"column_start":70,"column_end":71,"is_primary":true,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":70,"highlight_end":71}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":1713,"byte_end":1713,"line_start":56,"line_end":56,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":1722,"byte_end":1722,"line_start":56,"line_end":56,"column_start":21,"column_end":21,"is_primary":true,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":21,"highlight_end":21}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":1737,"byte_end":1737,"line_start":56,"line_end":56,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":1772,"byte_end":1772,"line_start":56,"line_end":56,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"fn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:56:70\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn variable(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn variable\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(input: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, var_map: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mFastHashMap<i32, i32>) -> IResult<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":2031,"byte_end":2035,"line_start":64,"line_end":64,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2046,"byte_end":2068,"line_start":64,"line_end":64,"column_start":35,"column_end":57,"is_primary":false,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":35,"highlight_end":57}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2081,"byte_end":2082,"line_start":64,"line_end":64,"column_start":70,"column_end":71,"is_primary":true,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":70,"highlight_end":71}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":2023,"byte_end":2023,"line_start":64,"line_end":64,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2032,"byte_end":2032,"line_start":64,"line_end":64,"column_start":21,"column_end":21,"is_primary":true,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":21,"highlight_end":21}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2047,"byte_end":2047,"line_start":64,"line_end":64,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2082,"byte_end":2082,"line_start":64,"line_end":64,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"fn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:64:70\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn not_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn not_expr\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(input: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, var_map: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mFastHashMap<i32, i32>) -> IResult<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":2276,"byte_end":2280,"line_start":71,"line_end":71,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":20,"highlight_end":24}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2291,"byte_end":2313,"line_start":71,"line_end":71,"column_start":35,"column_end":57,"is_primary":false,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":35,"highlight_end":57}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2326,"byte_end":2327,"line_start":71,"line_end":71,"column_start":70,"column_end":71,"is_primary":true,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":70,"highlight_end":71}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":2268,"byte_end":2268,"line_start":71,"line_end":71,"column_start":12,"column_end":12,"is_primary":true,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":12,"highlight_end":12}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2277,"byte_end":2277,"line_start":71,"line_end":71,"column_start":21,"column_end":21,"is_primary":true,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":21,"highlight_end":21}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2292,"byte_end":2292,"line_start":71,"line_end":71,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2327,"byte_end":2327,"line_start":71,"line_end":71,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"fn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:71:70\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn and_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn and_expr\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(input: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, var_map: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mFastHashMap<i32, i32>) -> IResult<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":2617,"byte_end":2621,"line_start":80,"line_end":80,"column_start":19,"column_end":23,"is_primary":false,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":19,"highlight_end":23}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2632,"byte_end":2654,"line_start":80,"line_end":80,"column_start":34,"column_end":56,"is_primary":false,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":34,"highlight_end":56}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2667,"byte_end":2668,"line_start":80,"line_end":80,"column_start":69,"column_end":70,"is_primary":true,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":69,"highlight_end":70}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":2609,"byte_end":2609,"line_start":80,"line_end":80,"column_start":11,"column_end":11,"is_primary":true,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":11,"highlight_end":11}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2618,"byte_end":2618,"line_start":80,"line_end":80,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2633,"byte_end":2633,"line_start":80,"line_end":80,"column_start":35,"column_end":35,"is_primary":true,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":35,"highlight_end":35}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2668,"byte_end":2668,"line_start":80,"line_end":80,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"fn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:80:69\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn or_expr(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn or_expr\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(input: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, var_map: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mFastHashMap<i32, i32>) -> IResult<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"missing lifetime specifier","code":{"code":"E0106","explanation":"This error indicates that a lifetime is missing from a type. If it is an error\ninside a function signature, the problem may be with failing to adhere to the\nlifetime elision rules (see below).\n\nErroneous code examples:\n\n```compile_fail,E0106\nstruct Foo1 { x: &bool }\n              // ^ expected lifetime parameter\nstruct Foo2<'a> { x: &'a bool } // correct\n\nstruct Bar1 { x: Foo2 }\n              // ^^^^ expected lifetime parameter\nstruct Bar2<'a> { x: Foo2<'a> } // correct\n\nenum Baz1 { A(u8), B(&bool), }\n                  // ^ expected lifetime parameter\nenum Baz2<'a> { A(u8), B(&'a bool), } // correct\n\ntype MyStr1 = &str;\n           // ^ expected lifetime parameter\ntype MyStr2<'a> = &'a str; // correct\n```\n\nLifetime elision is a special, limited kind of inference for lifetimes in\nfunction signatures which allows you to leave out lifetimes in certain cases.\nFor more background on lifetime elision see [the book][book-le].\n\nThe lifetime elision rules require that any function signature with an elided\noutput lifetime must either have:\n\n - exactly one input lifetime\n - or, multiple input lifetimes, but the function must also be a method with a\n   `&self` or `&mut self` receiver\n\nIn the first case, the output lifetime is inferred to be the same as the unique\ninput lifetime. In the second case, the lifetime is instead inferred to be the\nsame as the lifetime on `&self` or `&mut self`.\n\nHere are some examples of elision errors:\n\n```compile_fail,E0106\n// error, no input lifetimes\nfn foo() -> &str { }\n\n// error, `x` and `y` have distinct lifetimes inferred\nfn bar(x: &str, y: &str) -> &str { }\n\n// error, `y`'s lifetime is inferred to be distinct from `x`'s\nfn baz<'a>(x: &'a str, y: &str) -> &str { }\n```\n\n[book-le]: https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\n"},"level":"error","spans":[{"file_name":"src/expr/parser.rs","byte_start":2964,"byte_end":2968,"line_start":89,"line_end":89,"column_start":22,"column_end":26,"is_primary":false,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":22,"highlight_end":26}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2979,"byte_end":3001,"line_start":89,"line_end":89,"column_start":37,"column_end":59,"is_primary":false,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":37,"highlight_end":59}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/expr/parser.rs","byte_start":3014,"byte_end":3015,"line_start":89,"line_end":89,"column_start":72,"column_end":73,"is_primary":true,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":72,"highlight_end":73}],"label":"expected named lifetime parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider introducing a named lifetime parameter","code":null,"level":"help","spans":[{"file_name":"src/expr/parser.rs","byte_start":2956,"byte_end":2956,"line_start":89,"line_end":89,"column_start":14,"column_end":14,"is_primary":true,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":14,"highlight_end":14}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2965,"byte_end":2965,"line_start":89,"line_end":89,"column_start":23,"column_end":23,"is_primary":true,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":23,"highlight_end":23}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":2980,"byte_end":2980,"line_start":89,"line_end":89,"column_start":38,"column_end":38,"is_primary":true,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":38,"highlight_end":38}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/expr/parser.rs","byte_start":3015,"byte_end":3015,"line_start":89,"line_end":89,"column_start":73,"column_end":73,"is_primary":true,"text":[{"text":"fn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {","highlight_start":73,"highlight_end":73}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0106]\u001b[0m\u001b[0m\u001b[1m: missing lifetime specifier\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/expr/parser.rs:89:72\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn expression(input: &str, var_map: &FastHashMap<i32, i32>) -> IResult<&str, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `input` or `var_map`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn expression\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(input: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, var_map: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mFastHashMap<i32, i32>) -> IResult<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mstr, BooleanExpression> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0106, E0425, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0106, E0425, E0432.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0106`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0106`.\u001b[0m\n"}
